package org.dongchao.facade.webservices;

import org.dongchao.facade.webservices.interfaces.IUserFacade;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2017-05-13T14:27:40.889+08:00
 * Generated source version: 3.1.6
 */
@WebServiceClient(name = "UserServiceImplService",
        wsdlLocation = "http://localhost:8088/facade/service/user?wsdl",
        targetNamespace = "http://webservices.facade.dongchao.org/")
public class UserServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservices.facade.dongchao.org/", "UserServiceImplService");
    public final static QName UserServiceImplPort = new QName("http://webservices.facade.dongchao.org/", "UserServiceImplPort");

    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8088/facade/service/user?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UserServiceImplService.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}", "http://localhost:8088/facade/service/user?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public UserServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UserServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UserServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public UserServiceImplService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public UserServiceImplService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public UserServiceImplService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }


    /**
     * @return returns IUserFacade
     */
    @WebEndpoint(name = "UserServiceImplPort")
    public IUserFacade getUserServiceImplPort() {
        return super.getPort(UserServiceImplPort, IUserFacade.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns IUserFacade
     */
    @WebEndpoint(name = "UserServiceImplPort")
    public IUserFacade getUserServiceImplPort(WebServiceFeature... features) {
        return super.getPort(UserServiceImplPort, IUserFacade.class, features);
    }

}
